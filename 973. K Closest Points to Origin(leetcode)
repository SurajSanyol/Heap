class Solution {
public:
    class maycomp {
    public:
        bool operator()(pair<int, int>& a, pair<int, int>& b) {
            int distA = a.first * a.first + a.second * a.second;
            int distB = b.first * b.first + b.second * b.second;

            return distA > distB;
        }
    };

    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {

        vector<vector<int>> ans;
        priority_queue<pair<int, int>, vector<pair<int, int>>, maycomp> minHeap;

        for (auto it : points) {
            minHeap.push({it[0], it[1]});
        }

        while (!minHeap.empty() && k--) {
            auto topElement = minHeap.top();
            minHeap.pop();
            ans.push_back({topElement.first, topElement.second});
        }

        return ans;
    }
};
