
class node{
public:
    int data;
    int row;
    int col;

    node(int d, int r, int c) {
        this->data = d;
        this->row = r;
        this->col = c;
    }
};

class compare{
public:
    bool operator()(node* a, node* b) { return a->data > b->data; }
};

class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {

        int mini = INT_MAX;
        int maxi = INT_MIN;
        priority_queue<node*, vector<node*>, compare> pq;

        int k = nums.size();
       for (int i = 0; i < k; i++) {
            int element = nums[i][0];
            maxi = max(element, maxi);
            pq.push(new node(element, i, 0));
        }

        mini = pq.top()->data;

        int ansStart = mini;
        int ansEnd = maxi;

        while (!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            int topElement = top->data;
            int topRow = top->row;
            int topCol = top->col;

            /// update mini
            mini = topElement;

            // check for answer
            // int currRange = maxi - mini;
            // int ansRange = ansEnd - ansStart;
            if (maxi - mini < ansEnd - ansStart) {
                ansStart = mini;
                ansEnd = maxi;
            }

            // check new element in the same list
            if (topCol + 1 < nums[topRow].size()) {
                maxi = max(maxi, nums[topRow][topCol + 1]);
                pq.push(new node(nums[topRow][topCol + 1], topRow, topCol + 1));
            } else {
                break;
            }
        }

        // vector<int> ans;
        // ans.push_back(ansStart);
        // ans.push_back(ansEnd);
        // return ans;


         return {ansStart, ansEnd};
    }
};
